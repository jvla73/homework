# словари и множества

# 2. Создайте переменную my_dict и присвойте ей словарь из нескольких пар ключ-значение.
my_dict = {'Maya': 2001, 'Ashley': 1995, 'Jane': 1987}
# Выведите на экран словарь my_dict.
print('Dict:', my_dict)
# Выведите на экран одно значение по существующему ключу из словаря my_dict,
print('Existing value:', my_dict['Ashley'])
# одно по отсутствующему без ошибки.
print('Not existing value:', my_dict.get('Kira'))
# Добавьте ещё две произвольные пары того же формата в словарь my_dict.
my_dict.update({'Zoe': 1978, 'Irma': 1991})
# Удалите одну из пар в словаре по существующему ключу из словаря my_dict
d = my_dict.pop('Ashley')
# и выведите значение из этой пары на экран.
print('Deleted value:', d)
# Выведите на экран словарь my_dict.
print('Modified dictionary:', my_dict)

print() # для красивого отступа между пунктами

# 3 Создайте переменную my_set и присвойте ей множество,
# состоящее из разных типов данных с повторяющимися значениями.
my_set = {1, False, 3.15, 1, False, 'digit', 999, 3.15, 'digit'}
# Выведите на экран множество my_set (должны отобразиться только уникальные значения).
print('Set:', my_set)
# Добавьте 2 произвольных элемента в множество my_set, которых ещё нет.
my_set.add((1, 3.15, 999))
# my_set.add(True) # не отображается при выводе на терминал!
my_set.add('amazing')
# Удалите один любой элемент из множества my_set.
my_set.remove('digit') # отобразит KeyError, если запустить внутри print() после discard()
my_set.discard('digit') # отобразит None, если запустить внутри print() после remove()
# Выведите на экран измененное множество my_set.
print('Modified_set:', my_set)